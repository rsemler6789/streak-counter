{"version":3,"file":"index.modern.js","sources":["../src/lib.ts","../src/index.ts"],"sourcesContent":["\r\nexport interface Streak {\r\n    currentCount: number;\r\n    startDate: string;\r\n    lastLoginDate: string;\r\n}\r\n  \r\nexport const key = \"streak\"\r\n\r\nexport function dayDiff(date1: string, date2: string): number {\r\n    const date1AsDate = new Date(date1)\r\n    const date2AsDate = new Date(date2)\r\n    const diffTime = Math.abs(date2AsDate.getTime() - date1AsDate.getTime());\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n}\r\n\r\n\r\nexport function shouldIncrement(inputDate: Date, currentStoredDate: string): 'increment' | 'reset' | 'nothing'{\r\n    const dateDiff = dayDiff(currentStoredDate, inputDate.toDateString());\r\n    if(dateDiff === 0) return 'nothing';\r\n    return dateDiff === 1 ? 'increment' : 'reset';\r\n}\r\n  \r\nexport function buildStreak(storage: Storage, inputStreak: Partial<Streak>): Streak {\r\n    let streak;\r\n    const streakInLocalStorage = storage.getItem(key);\r\n    if (streakInLocalStorage) {\r\n        try {\r\n        streak = JSON.parse(streakInLocalStorage || \"\");\r\n        streak = {\r\n            ...streak,\r\n            ...inputStreak\r\n        }\r\n        storage.setItem(key, streak)\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    return streak;\r\n}","import { Streak, key, buildStreak, shouldIncrement } from './lib'\r\n\r\nexport function streakCounter(storage: Storage, date: Date): Streak {\r\n  const streakInLocalStorage = storage.getItem(key);\r\n  if (streakInLocalStorage) {\r\n    try {\r\n      let streak = JSON.parse(streakInLocalStorage || \"\");\r\n      let incrementOutput = shouldIncrement(date, streak.lastLoginDate);\r\n      if(incrementOutput === 'increment') {\r\n        let count = streak.currentCount + 1;\r\n        streak = {\r\n          ...streak,\r\n          lastLoginDate: date.toLocaleDateString(\"en-US\"),\r\n          currentCount: count\r\n        }\r\n      } else if(incrementOutput === 'reset') {\r\n        streak = {\r\n          ...streak,\r\n          lastLoginDate: date.toLocaleDateString(\"en-US\"),\r\n          currentCount: 1\r\n        }\r\n      }\r\n      storage.setItem(key, JSON.stringify(streak));\r\n      return streak;\r\n    } catch (error) {\r\n      console.error(\"Failed to parse streak from localStorage\");\r\n    }\r\n  }\r\n  const streak = {\r\n    currentCount: 1,\r\n    startDate: date.toLocaleDateString(\"en-US\"),\r\n    lastLoginDate: date.toLocaleDateString(\"en-US\"),\r\n  };\r\n\r\n  // store in localStorage\r\n  storage.setItem(key, JSON.stringify(streak));\r\n\r\n  return streak;\r\n}"],"names":["key","streakCounter","storage","date","streakInLocalStorage","getItem","JSON","parse","incrementOutput","inputDate","currentStoredDate","dateDiff","date1","date2","date1AsDate","Date","date2AsDate","Math","abs","getTime","ceil","diffTime","dayDiff","toDateString","shouldIncrement","streak","lastLoginDate","count","currentCount","toLocaleDateString","setItem","stringify","error","console","startDate"],"mappings":"0OAOgBA,EAAG,SCLHC,SAAAA,EAAcC,EAAkBC,GAC9C,MAA0BC,EAAGF,EAAQG,QAAQL,GAC7C,GAAII,EACF,IACE,MAAaE,KAAKC,MAAMH,GAAwB,IAC7BI,WDUOC,EAAiBC,GAC7C,MAAcC,WATMC,EAAeC,GACnC,MAAiBC,EAAG,IAAAC,KAASH,GACvBI,EAAc,IAAID,KAAKF,KACZI,KAAKC,IAAIF,EAAYG,UAAYL,EAAYK,WAC9D,YAAYC,KAAKC,EAAY,OAKZC,CAAQZ,EAAmBD,EAAUc,gBACtD,OAAgB,IAAbZ,EAAuB,UACN,IAAbA,EAAiB,YAAc,QCbda,CAAgBrB,EAAMsB,EAAOC,eACnD,GAAuB,cAApBlB,EAAiC,CAClC,IAASmB,EAAGF,EAAOG,aAAe,EAClCH,EACKA,EAAAA,GAAAA,GACHC,cAAevB,EAAK0B,mBAAmB,SACvCD,aAAcD,QAEY,UAApBnB,IACRiB,OACKA,EADC,CAEJC,cAAevB,EAAK0B,mBAAmB,SACvCD,aAAc,KAIlB,OADA1B,EAAQ4B,QAAQ9B,EAAKM,KAAKyB,UAAUN,IAC7BA,EACP,MAAOO,GACPC,QAAQD,MAAM,4CAGlB,QAAe,CACbJ,aAAc,EACdM,UAAW/B,EAAK0B,mBAAmB,SACnCH,cAAevB,EAAK0B,mBAAmB,UAMzC,OAFA3B,EAAQ4B,QAAQ9B,EAAKM,KAAKyB,UAAUN,IAGrCA"}