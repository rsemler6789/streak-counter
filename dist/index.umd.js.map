{"version":3,"file":"index.umd.js","sources":["../src/lib.ts","../src/index.ts"],"sourcesContent":["\r\nexport interface Streak {\r\n    currentCount: number;\r\n    startDate: string;\r\n    lastLoginDate: string;\r\n}\r\n  \r\nexport const key = \"streak\"\r\n\r\nexport function dayDiff(date1: string, date2: string): number {\r\n    const date1AsDate = new Date(date1)\r\n    const date2AsDate = new Date(date2)\r\n    const diffTime = Math.abs(date2AsDate.getTime() - date1AsDate.getTime());\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n}\r\n\r\n\r\nexport function shouldIncrement(inputDate: Date, currentStoredDate: string): 'increment' | 'reset' | 'nothing'{\r\n    const dateDiff = dayDiff(currentStoredDate, inputDate.toDateString());\r\n    if(dateDiff === 0) return 'nothing';\r\n    return dateDiff === 1 ? 'increment' : 'reset';\r\n}\r\n  \r\nexport function buildStreak(storage: Storage, inputStreak: Partial<Streak>): Streak {\r\n    let streak;\r\n    const streakInLocalStorage = storage.getItem(key);\r\n    if (streakInLocalStorage) {\r\n        try {\r\n        streak = JSON.parse(streakInLocalStorage || \"\");\r\n        streak = {\r\n            ...streak,\r\n            ...inputStreak\r\n        }\r\n        storage.setItem(key, streak)\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    return streak;\r\n}","import { Streak, key, buildStreak, shouldIncrement } from './lib'\r\n\r\nexport function streakCounter(storage: Storage, date: Date): Streak {\r\n  const streakInLocalStorage = storage.getItem(key);\r\n  if (streakInLocalStorage) {\r\n    try {\r\n      let streak = JSON.parse(streakInLocalStorage || \"\");\r\n      let incrementOutput = shouldIncrement(date, streak.lastLoginDate);\r\n      if(incrementOutput === 'increment') {\r\n        let count = streak.currentCount + 1;\r\n        streak = {\r\n          ...streak,\r\n          lastLoginDate: date.toLocaleDateString(\"en-US\"),\r\n          currentCount: count\r\n        }\r\n      } else if(incrementOutput === 'reset') {\r\n        streak = {\r\n          ...streak,\r\n          lastLoginDate: date.toLocaleDateString(\"en-US\"),\r\n          currentCount: 1\r\n        }\r\n      }\r\n      storage.setItem(key, JSON.stringify(streak));\r\n      return streak;\r\n    } catch (error) {\r\n      console.error(\"Failed to parse streak from localStorage\");\r\n    }\r\n  }\r\n  const streak = {\r\n    currentCount: 1,\r\n    startDate: date.toLocaleDateString(\"en-US\"),\r\n    lastLoginDate: date.toLocaleDateString(\"en-US\"),\r\n  };\r\n\r\n  // store in localStorage\r\n  storage.setItem(key, JSON.stringify(streak));\r\n\r\n  return streak;\r\n}"],"names":["key","streakCounter","storage","date","date1","date2","date1AsDate","date2AsDate","dateDiff","streakInLocalStorage","getItem","JSON","parse","incrementOutput","streak","lastLoginDate","toDateString","Date","Math","abs","getTime","ceil","diffTime","count","currentCount","toLocaleDateString","setItem","stringify","error","console","startDate"],"mappings":"+cAOgBA,EAAG,yBCLHC,SAAcC,EAAkBC,GAC9C,IDMsBC,EAAeC,EAClBC,EACXC,IAOQC,ECfUC,EAAGP,EAAQQ,QAAQV,GAC7C,GAAIS,EACF,IACE,MAAaE,KAAKC,MAAMH,GAAwB,IAC7BI,GDEDT,ECF0BU,EAAOC,cDElBV,ECFKF,EDWca,eARrCV,EAAG,IAAAW,KAASb,GACvBG,EAAc,IAAIU,KAAKZ,KACZa,KAAKC,IAAIZ,EAAYa,UAAYd,EAAYc,WAO9C,KADFZ,OALFa,KAAKC,EAAY,QAMH,UACN,IAAbd,EAAiB,YAAc,SCZpC,GAAuB,cAApBK,EAAiC,CAClC,IAASU,EAAGT,EAAOU,aAAe,EAClCV,EACKA,EAAAA,GAAAA,GACHC,cAAeZ,EAAKsB,mBAAmB,SACvCD,aAAcD,QAEY,UAApBV,IACRC,OACKA,EADC,CAEJC,cAAeZ,EAAKsB,mBAAmB,SACvCD,aAAc,KAIlB,OADAtB,EAAQwB,QAAQ1B,EAAKW,KAAKgB,UAAUb,IAC7BA,EACP,MAAOc,GACPC,QAAQD,MAAM,4CAGlB,MAAe,CACbJ,aAAc,EACdM,UAAW3B,EAAKsB,mBAAmB,SACnCV,cAAeZ,EAAKsB,mBAAmB,UAMzC,OAFAvB,EAAQwB,QAAQ1B,EAAKW,KAAKgB,UAAUb,IAGrCA"}